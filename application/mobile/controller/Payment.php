<?php

namespace app\mobile\controller;

class Payment extends MobileMall {

    public function _initialize() {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Alipay支付回调
     */
    public function alipay_h5_return() {
        $out_trade_no = explode('-', input('param.out_trade_no'));
        $order_type = $out_trade_no['0'];
        $out_trade_no = $out_trade_no['1'];
        $trade_no = input('param.trade_no');

        $payment_code = 'alipay_h5';
        //创建支付接口对象
        $logic_payment = model('payment', 'logic');
        $result = $logic_payment->getPaymentInfo($payment_code);
        if (!$result['code']) {
            $this->error($result['msg'], 'Memberorder/index');
        }
        $payment_info = $result['data'];
        //创建支付接口对象
        $payment_api = new $payment_info['payment_code']($payment_info);
        

        //取得支付结果
        $callback_info = $payment_api->verify_return();

        if (!$callback_info) {
            $this->assign('result', 'fail');
            $this->assign('message', '支付失败');
        } else {
            $this->assign('result', 'success');
            $this->assign('message', '支付成功');
        }
        
        //支付成功后跳转
        if ($order_type == 'real_order') {
            $pay_ok_url = WAP_SITE_URL . '/member/order_list.html';
        } elseif ($order_type == 'vr_order') {
            $pay_ok_url = WAP_SITE_URL . '/member/order_list.html';
        } elseif ($order_type == 'pd_order') {
            $pay_ok_url = WAP_SITE_URL . '/member/pdrecharge_list.html';
        }
        $this->assign('pay_ok_url', $pay_ok_url);

        return $this->fetch('payment_message');
    }


    /**
     * 支付宝wap支付异步通知
     */
    public function alipay_h5_notify() {
        file_put_contents("alipay_h5_notify.log",json_encode($_POST),FILE_APPEND);
        $this->notify('alipay','alipay_h5');
    }


    /**
     *
     * @param type $payment_code  共用回调方法
     * @param type $show_code  实际支付方式名称
     */
    public function notify($payment_code,$show_code='') {
        $logic_payment = model('payment', 'logic');
        $result = $logic_payment->getPaymentInfo($payment_code);
        $payment_info = $result['data'];

        //创建支付接口对象
        $payment_api = new $payment_info['payment_code']($payment_info);

        //对进入的参数进行远程数据判断
        $verify = $payment_api->verify_notify();
        if ($verify['trade_status'] != 1) {
            exit;
        }
        $out_trade_no = $verify['out_trade_no']; #内部订单号
        $trade_no = $verify['trade_no']; #交易订单号
        $order_type = $verify['order_type']; #交易类型

        $update_result = $logic_payment->updateOrder($out_trade_no, $trade_no, $order_type, $show_code?$show_code:$payment_code);
        exit($update_result ? 'success' : 'fail');
    }
}
