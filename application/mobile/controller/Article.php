<?php

namespace app\mobile\controller;


use think\Db;

class Article extends MobileHome
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 文章列表
     */
    public function article_list()
    {
        $article_model = model('article');
        $condition = array();
        $condition['article_show'] = '1';
        $last = strtotime(date('Y-m-d', strtotime('- 1 month')));
        $now = time();
        $date = date('Y-m-d', time());
        $condition['article_time'] = ['between', array($last, $now)];
        $article_list = $article_model->getArticleList($condition, $this->pagesize, 'article_time');
        if (!empty($article_list)) {
            foreach ($article_list as $k => $v) {
                $article_list[$k]['article_time'] = date('Y-m-d', $v['article_time']);
                $article_list[$k]['article_content'] = strip_tags($v['article_content']);
            }
            $arr[] = $article_list[0];
            //修复赋值不生效
            foreach ($article_list as $k => $v) {
                if ($v['article_time'] == $date) {
                    $article_list[$k]['is_hot'] = 1;
                } else {
                    $article_list[$k]['is_hot'] = 0;
                }
                unset($article_list[0]);
            }
            $article_list=array_values($article_list);
        }else{
            $result['frist_list']=['article_id'=>'','article_url'=>'','article_title'=>'','article_content'=>'','article_time'=>'','amount'=>0];
            $result['article_list']=[];$result['hasmore']=false;$result['page_total']=1;
            ds_json_encode(10001, '暂时没有文章', $result);
        }
        $result = array_merge(array('article_list' => $article_list), mobile_page(is_object($article_model->page_info) ? $article_model->page_info : ''));
        $result['frist_list'] = $arr;
        ds_json_encode(10000, '获取成功', $result);
    }

    /**
     * 根据类别编号获取文章类别信息
     */
    private function article_type_name()
    {
        if (!empty(input('param.ac_id')) && intval(input('param.ac_id')) > 0) {
            $articleclass_model = model('articleclass');
            $article_class = $articleclass_model->getOneArticleclass(intval(input('param.ac_id')));
            return ($article_class['ac_name']);
        } else {
            return ('缺少参数:文章类别编号');
        }
    }

    /**
     * 单篇文章显示
     */
    public function article_show()
    {
        $article_model = model('article');
        $article_id = intval(input('param.article_id'));
        if ($article_id > 0) {
            $condition = array();
            $condition['article_id'] = $article_id;
            $article = $article_model->getOneArticle($condition);
            $article['article_time'] = date('Y-m-d H:i:s', $article['article_time']);
            $article['article_content'] = strip_tags($article['article_content']);
            if (empty($article)) {
                ds_json_encode(10001, '文章不存在');
            } else {
                Db::table('ds_article')->where('article_id', $article_id)->setInc('amount', 1);//字段+1
                $key = input('key');
                if (!empty($key)) {
                    $this->add_points($article_id);
                }
                ds_json_encode(10000, '', $article);
            }
        } else {
            ds_json_encode(10001, '缺少参数:文章编号');
        }
    }


    protected function add_points($article_id)
    {
        //判断是否登录
        $this->isLogin();
        //检测是否已经赠送过
        $readLog = model("memberreadlog")->get(array("member_id" => $this->member_info['member_id'], "article_id" => $article_id));
        if (is_null($readLog)) {
            $data = array('pl_memberid' => $this->member_info['member_id'], 'pl_membername' => $this->member_info['member_name']);
            //阅读赠送积分
            model("Points")->savePointslog("read", $data);
            model("member_read_log")->create(array(
                "member_id" => $this->member_info['member_id'],
                "article_id" => $article_id,
                "created_at" => date('Y-m-d H:i:s')
            ));
        }
    }

    protected function isLogin()
    {
        $mbusertoken_model = model('mbusertoken');
        $key = input('key');
        $mb_user_token_info = $mbusertoken_model->getMbusertokenInfoByToken($key);
        if (empty($mb_user_token_info)) {
            ds_json_encode(10001, '请登录', array('login' => '0'));
        }
        $member_model = model('member');
        $this->member_info = $member_model->getMemberInfoByID($mb_user_token_info['member_id']);
        $meter_second = model('member')->where('member_id', $mb_user_token_info['member_id'])->find();
        if (empty($this->member_info)) {
            ds_json_encode(10001, '参数错误', array('login' => '0'));
        } else {
            $this->member_info['member_clienttype'] = $mb_user_token_info['member_clienttype'];
            $this->member_info['meter_second'] = $meter_second['meter_second'];
            $this->member_info['member_openid'] = $mb_user_token_info['member_openid'];
            $this->member_info['member_token'] = $mb_user_token_info['member_token'];
            $level_name = $member_model->getOneMemberGrade($mb_user_token_info['member_id']);
            $this->member_info['level_name'] = $level_name['level_name'];
            //考虑到模型中session
            if (session('member_id') != $this->member_info['member_id']) {
                //避免重复查询数据库
                $member_model->createSession(array_merge($this->member_info, $level_name));
            }
        }
    }


}